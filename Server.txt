import java.io.*;
import java.net.*;
import java.util.concurrent.atomic.AtomicInteger;

public class SummationServer {
    private static final int PORT = 12345;
    private static final int MAX_CLIENTS = 3;
    private static AtomicInteger clientCount = new AtomicInteger(0);

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("Server is running...");

            while (true) {
                if (clientCount.get() >= MAX_CLIENTS) {
                    System.out.println("Max clients reached. Shutting down server.");
                    break;
                }

                Socket clientSocket = serverSocket.accept();
                clientCount.incrementAndGet();
                System.out.println("Client connected. Current count: " + clientCount.get());

                new Thread(new ClientHandler(clientSocket)).start();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static class ClientHandler implements Runnable {
        private Socket clientSocket;

        public ClientHandler(Socket socket) {
            this.clientSocket = socket;
        }

        @Override
        public void run() {
            try (
                BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true)
            ) {
                out.println("Welcome to the Summation Server! Please enter a number N for summation:");

                String input;
                while ((input = in.readLine()) != null) {
                    try {
                        int n = Integer.parseInt(input);
                        int sum = calculateSum(n);
                        out.println("Summation up to " + n + " is: " + sum);
                    } catch (NumberFormatException e) {
                        out.println("Invalid number. Please enter an integer.");
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    clientSocket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                System.out.println("Client disconnected.");
            }
        }

        private int calculateSum(int n) {
            return n * (n + 1) / 2;
        }
    }
}

















import java.io.*;
import java.net.*;

public class SummationClient {
    private static final String SERVER_ADDRESS = "localhost";
    private static final int SERVER_PORT = 12345;

    public static void main(String[] args) {
        try (Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
             BufferedReader consoleReader = new BufferedReader(new InputStreamReader(System.in))
        ) {
            System.out.println("Connected to the server.");

            String response;
            while ((response = in.readLine()) != null) {
                System.out.println("Server: " + response);

                if (response.startsWith("Summation")) {
                    System.out.print("Enter a number (or 'exit' to quit): ");
                    String input = consoleReader.readLine();

                    if ("exit".equalsIgnoreCase(input)) {
                        break;
                    }
                    out.println(input);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
